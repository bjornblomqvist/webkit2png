#!/usr/bin/env python

# webkit2png - makes screenshots of webpages
# http://www.paulhammond.org/webkit2png

__version__ = "0.1"

# Copyright (c) 2009 Paul Hammond
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
                
import sys
import optparse

try:
  import Foundation
  import WebKit
  import AppKit
  import objc
  mode = "pyobjc";
except ImportError:
  try:
    import gobject
    import gtk
    import pango
    import webkit
    mode = "pygtk"
  except ImportError:
    print "Cannot find pyobjc or python-webkit library files.  Are you sure they're installed?"
    sys.exit() 

if mode == 'pyobjc':
  
  class PyObjcBrowser:
    
    class AppDelegate (Foundation.NSObject):
        # what happens when the app starts up
        def applicationDidFinishLaunching_(self, aNotification):
            webview = aNotification.object().windows()[0].contentView()
            webview.frameLoadDelegate().getURL(webview)
            self.performSelector_withObject_afterDelay_( "timeout:", None, 60 )

        def timeout_(self, obj):
            NSLog("timed out!")
            NSApplication.sharedApplication().terminate_(None)

    class WebkitLoad (Foundation.NSObject, WebKit.protocols.WebFrameLoadDelegate):

        # what happens if something goes wrong while loading
        def webView_didFailLoadWithError_forFrame_(self,webview,error,frame):
            print " ... something went wrong: "+error.localizedDescription()
            self.getURL(webview)

        def webView_didFailProvisionalLoadWithError_forFrame_(self,webview,error,frame):
            print " ... something went wrong: "+error.localizedDescription()
            self.getURL(webview)

        def saveImages(self,bitmapdata,filename,options):
            bitmapdata.representationUsingType_properties_(AppKit.NSPNGFileType,None).writeToFile_atomically_(filename + "-full.png",objc.YES)

        def getURL(self,webview):
            if self.urls:
                if self.urls[0] == '-':
                    url = sys.stdin.readline().rstrip()
                    if not url: AppKit.NSApplication.sharedApplication().terminate_(None)
                else: 
                    url = self.urls.pop(0)
            else:
                AppKit.NSApplication.sharedApplication().terminate_(None)
            print "Fetching", url, "..."
            self.resetWebview(webview)
            webview.mainFrame().loadRequest_(Foundation.NSURLRequest.requestWithURL_(Foundation.NSURL.URLWithString_(url)))
            if not webview.mainFrame().provisionalDataSource():
                print " ... not a proper url?"
                self.getURL(webview)

        def resetWebview(self,webview):
            rect = Foundation.NSMakeRect(0,0,self.options.initWidth,self.options.initHeight)
            webview.window().setContentSize_((self.options.initWidth,self.options.initHeight))
            webview.setFrame_(rect)

        def resizeWebview(self,view):
            view.window().display()
            view.window().setContentSize_(view.bounds().size)
            view.setFrame_(view.bounds())

        def captureView(self,view):
            view.lockFocus()
            bitmapdata = AppKit.NSBitmapImageRep.alloc()
            bitmapdata.initWithFocusedViewRect_(view.bounds())
            view.unlockFocus()
            return bitmapdata

        # what happens when the page has finished loading
        def webView_didFinishLoadForFrame_(self,webview,frame):
            # don't care about subframes
            if (frame == webview.mainFrame()):
                Foundation.NSTimer.scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_( self.options.delay, self, self.doGrab, webview, False)

        def doGrab(self,timer):
                webview = timer.userInfo()
                view = webview.mainFrame().frameView().documentView()

                self.resizeWebview(view)

                URL = webview.mainFrame().dataSource().initialRequest().URL().absoluteString()
                filename = makeFilename(URL, self.options) 

                bitmapdata = self.captureView(view)  
                self.saveImages(bitmapdata,filename,self.options)

                print " ... done"
                self.getURL(webview)

    def __init__(self, options, args):
      app = AppKit.NSApplication.sharedApplication()

      # create an app delegate
      delegate = PyObjcBrowser.AppDelegate.alloc().init()
      AppKit.NSApp().setDelegate_(delegate)

      # create a window
      rect = Foundation.NSMakeRect(0,0,100,100)
      win = AppKit.NSWindow.alloc()
      win.initWithContentRect_styleMask_backing_defer_ (rect, 
              AppKit.NSBorderlessWindowMask, 2, 0)
      if options.debug:
        win.orderFrontRegardless()
      # create a webview object
      webview = WebKit.WebView.alloc()
      webview.initWithFrame_(rect)
      # turn off scrolling so the content is actually x wide and not x-15
      webview.mainFrame().frameView().setAllowsScrolling_(objc.NO)

      webview.setPreferencesIdentifier_('webkit2png')
      webview.preferences().setLoadsImagesAutomatically_(not options.noimages)

      # add the webview to the window
      win.setContentView_(webview)

      # create a LoadDelegate
      loaddelegate = PyObjcBrowser.WebkitLoad.alloc().init()
      loaddelegate.options = options
      loaddelegate.urls = args
      webview.setFrameLoadDelegate_(loaddelegate)

      app.run()    



if mode == 'pygtk':
  
  class PyGTKBrowser:
    
    
    def _do_time_out(self, view, web_frame):
      pixmap = view.get_snapshot(None)
      size = pixmap.get_size();
      
      URL = view.get_main_frame().get_uri()
      filename = makeFilename(URL, self.options)
      
      pixbuf = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, False, 8, size[0], size[1])
      pixbuf.get_from_drawable(pixmap, pixmap.get_colormap(),0,0,0,0,-1,-1)

      pixbuf.save(filename, "png")
      
      gtk.main_quit()
      
      
    def _view_load_finished_cb(self, view, web_frame):
      gobject.timeout_add(self.options.delay,self._do_time_out,view, web_frame)
    
    def __init__(self, options, args):
      self.options = options;

      gobject.threads_init()
      window = gtk.Window()
      window.resize(int(options.initWidth),int(options.initHeight))
      view = webkit.WebView()
      
      settings = view.get_settings()
      settings.set_property("auto-load-images", not options.noimages)
      settings.set_property("user-agent", options.user_agent)
      view.set_settings(settings)
      
      view.connect("load-finished", self._view_load_finished_cb)
      
      window.add(view)
      window.show_all()
      view.open(options.url)
      # go go go
      gtk.main()
    
  

def main():
  
      # parse the command line
      usage = """%prog [options] [http://example.net/ ...]

examples:
%prog http://google.com/            # screengrab google"""

      cmdparser = optparse.OptionParser(usage,version=("webkit2png "+__version__))
      # TODO: add quiet/verbose options
      cmdparser.add_option("-W", "--min-width",type="float",dest='width',default=800.0,
         help="initial (and minimum) width of browser (default: 800)")
      cmdparser.add_option("-H", "--min-height",dest='height',type="float",default=600.0,
         help="initial (and minimum) height of browser (default: 600)")
      cmdparser.add_option("-u", "--user-agent", type="string",default="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/534.51.22 (KHTML, like Gecko) Version/5.1.1 Safari/534.51.22",
         help="user agent sent to server")
      cmdparser.add_option("-U", "--url", type="string",default="",
        help="url to fetch")
      cmdparser.add_option("-o", "--out", type="string",default="",
        help="save images as NAME.png,NAME-thumb.png etc")
      cmdparser.add_option("-m", "--md5", action="store_true",
         help="use md5 hash for filename (like del.icio.us)")
      cmdparser.add_option("--delay",type="int",default=0,
         help="delay between page load finishing and screenshot")
      cmdparser.add_option("--noimages", action="store_true",
         help="don't load images")
      cmdparser.add_option("--debug", action="store_true",
         help=optparse.SUPPRESS_HELP)
      (options, args) = cmdparser.parse_args()
      
      if options.url == "":
        cmdparser.print_help()
        print "You must supplie url to fetch"
        return

      if options.out == "" and options.md5 == None:
        cmdparser.print_help()
        print "You must supplie a out file path or use the md5 option"
        return

      # work out the initial size of the browser window
      options.initWidth = options.width
      options.initHeight = options.height

  
      if mode == 'pyobjc':
        PyObjcBrowser(options, args)
      elif mode == 'pygtk':
        PyGTKBrowser(options, args)

def makeFilename(URL,options):
   # make the filename
   if options.out:
     filename = options.out
   else:
     try:
            import md5
     except ImportError:
            print "--md5 requires python md5 library"
            AppKit.NSApplication.sharedApplication().terminate_(None)
     filename = md5.new(URL).hexdigest()
     
   return filename

      
if __name__ == "__main__": main()
  