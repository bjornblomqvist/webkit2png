#!/usr/bin/python

# webkit2png - makes screenshots of webpages
# http://www.paulhammond.org/webkit2png

__version__ = "0.5"

# Copyright (c) 2009 Paul Hammond
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

import sys
import optparse

try:
    import objc
    import Foundation
    import AppKit
    import Quartz
    import WebKit
except ImportError:
  print "Cannot find pyobjc library files.  Are you sure it is installed?"
  sys.exit(1) 

try:
  import xattr
except ImportError:
  print "xattr not found. Will not write source URL."

class WebkitLoad (Foundation.NSObject, WebKit.protocols.WebFrameLoadDelegate):
    xpathRect = None

    # what happens if something goes wrong while loading
    def webView_didFailLoadWithError_forFrame_(self,webview,error,frame):
        print " ... something went wrong: " + error.localizedDescription()
    def webView_didFailProvisionalLoadWithError_forFrame_(self,webview,error,frame):
        print " ... something went wrong: " + error.localizedDescription()

    # make the filename
    def makeFilename(self,URL,options):
        if options.filename:
            filename = options.filename
        elif options.md5:
            try:
                from hashlib import md5
            except ImportError:
                try:
                    import md5
                    md5 = md5.new
                except ImportError:
                    print "--md5 requires python md5 library"
                    sys.exit(1)
            filename = md5(URL).hexdigest()
        else:
            import re
            filename = re.sub('\W','',URL);
            filename = re.sub('^http','',filename);
        if options.datestamp:
            import time
            now = time.strftime("%Y%m%d")
            filename = now + "-" + filename
        import os
        dir = os.path.abspath(os.path.expanduser(options.dir))
        if not os.path.exists(options.dir):
            os.makedirs(dir)
        return os.path.join(dir,filename)

    def saveImages(self,bitmapdata,filename,options,URL):
        # save the fullsize png
        if options.fullsize:
            bitmapdata.representationUsingType_properties_(AppKit.NSPNGFileType,None).writeToFile_atomically_(filename+'.png',objc.YES)

        if options.thumb or options.clipped:
            # work out how big the thumbnail is
            width = bitmapdata.pixelsWide()
            height = bitmapdata.pixelsHigh()
            thumbWidth = (width * options.scale)
            thumbHeight = (height * options.scale)

            # make the thumbnails in a scratch image
            scratch = AppKit.NSImage.alloc().initWithSize_(
                    Foundation.NSMakeSize(thumbWidth,thumbHeight))
            scratch.lockFocus()
            AppKit.NSGraphicsContext.currentContext().setImageInterpolation_(
                    AppKit.NSImageInterpolationHigh)
            thumbRect = Foundation.NSMakeRect(0.0, 0.0, thumbWidth, thumbHeight)
            clipRect = Foundation.NSMakeRect(0.0,
                    thumbHeight-options.clipheight,
                    options.clipwidth, options.clipheight)
            bitmapdata.drawInRect_(thumbRect)
            thumbOutput = AppKit.NSBitmapImageRep.alloc().initWithFocusedViewRect_(thumbRect)
            clipOutput = AppKit.NSBitmapImageRep.alloc().initWithFocusedViewRect_(clipRect)
            scratch.unlockFocus()

            # save the thumbnails as pngs
            if options.thumb:
                thumbOutput.representationUsingType_properties_(
                        AppKit.NSPNGFileType,None
                    ).writeToFile_atomically_(filename + "-thumb.png",objc.YES)
                self.writeSource(filename + "-thumb.png", URL)
            if options.clipped:
                clipOutput.representationUsingType_properties_(
                        AppKit.NSPNGFileType,None
                    ).writeToFile_atomically_(filename + "-clipped.png",objc.YES)
                self.writeSource(filename + "-clipped.png", URL)

    def writeSource(self,filemame, url):
        if globals().get('xattr', False):
            xattr.setxattr(filemame, "com.apple.metadata:kMDItemWhereFroms", url)
            

    def getURL(self,webview):
        if self.urls:
            if self.urls[0] == '-':
                url = sys.stdin.readline().rstrip()
                if not url: AppKit.NSApplication.sharedApplication().terminate_(None)
            else:
                url = self.urls.pop(0)
        else:
            sys.exit(1)
        print "Fetching", url, "..."
        webview.setFrame_(Foundation.NSMakeRect(0,0,self.options.initWidth,self.options.initHeight))
        webview.mainFrame().loadRequest_(Foundation.NSURLRequest.requestWithURL_(Foundation.NSURL.URLWithString_(url)))
        if not webview.mainFrame().provisionalDataSource():
            print " ... not a proper url?"
            self.getURL(webview)

    def captureView(self,view):
        bounds = view.bounds()
        if self.xpathRect and self.xpathRect[2] > 0 and self.xpathRect[3] > 0:
          bounds.origin.x = self.xpathRect[0]
          bounds.origin.y = self.xpathRect[1];
          bounds.size.width = self.xpathRect[2];
          bounds.size.height = self.xpathRect[3];
        view.lockFocus()
        bitmapdata = AppKit.NSBitmapImageRep.alloc()
        bitmapdata.initWithFocusedViewRect_(bounds)
        view.unlockFocus()
        return bitmapdata
 
    # what happens when the page has finished loading
    def webView_didFinishLoadForFrame_(self,webview,frame):
        # don't care about subframes
        if (frame == webview.mainFrame()):
          if (self.options.xpath !=  ""):
            wso = webview.windowScriptObject();
            rect = wso.evaluateWebScript_("""(function() {
var e = $X('%s')[0];
if(e) {
  var position = getElementPosition(e);
  return [
    position.left,
    position.top,
    e.clientWidth,
    e.clientHeight
  ];
} else {
  return false;
}

// http://d.hatena.ne.jp/javascripter/20080531/1212264942
function getElementPosition(elem){
  var position=elem.getBoundingClientRect();
  return {
    left:Math.round(window.scrollX+position.left),
    top:Math.round(window.scrollY+position.top)
  }
}

// http://gist.github.com/3238
// extend version of $X
// $X(exp);
// $X(exp, context);
// $X(exp, type);
// $X(exp, context, type);
function $X (exp, context, type /* want type */) {
  if (typeof context == "function") {
    type = context;
    context = null;
  }
  if (!context) context = document;
  exp = (context.ownerDocument || context).createExpression(exp, function (prefix) {
    var o = document.createNSResolver(context)(prefix);
    if (o) return o;
    return (document.contentType == "application/xhtml+xml") ? "http://www.w3.org/1999/xhtml" : "";
  });
  
  switch (type) {
  case String: return exp.evaluate(context, XPathResult.STRING_TYPE, null).stringValue;
  case Number: return exp.evaluate(context, XPathResult.NUMBER_TYPE, null).numberValue;
  case Boolean: return exp.evaluate(context, XPathResult.BOOLEAN_TYPE, null).booleanValue;
  case Array:
    var result = exp.evaluate(context, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
    for (var ret = [], i = 0, len = result.snapshotLength; i < len; i++) {
      ret.push(result.snapshotItem(i));
    }
    return ret;
  case undefined:
    var result = exp.evaluate(context, XPathResult.ANY_TYPE, null);
    switch (result.resultType) {
    case XPathResult.STRING_TYPE : return result.stringValue;
    case XPathResult.NUMBER_TYPE : return result.numberValue;
    case XPathResult.BOOLEAN_TYPE: return result.booleanValue;
    case XPathResult.UNORDERED_NODE_ITERATOR_TYPE:
      // not ensure the order.
      var ret = [], i = null;
      while ((i = result.iterateNext())) ret.push(i);
      return ret;
    }
    return null;
  default: throw(TypeError("$X: specified type is not valid type."));
  }
}
})()
""" % self.options.xpath);
            if(type(rect) != WebKit.WebUndefined):
              self.xpathRect = rect;
          Foundation.NSTimer.scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_( self.options.delay, self, self.doGrab, webview, False)

    def doGrab(self,timer):
        webview = timer.userInfo()
        view = webview.mainFrame().frameView().documentView()
        view.setFrame_(view.bounds())
        width, height = view.bounds().size.width, view.bounds().size.height
        cs = Quartz.CoreGraphics.CGColorSpaceCreateWithName(Quartz.CoreGraphics.kCGColorSpaceGenericRGB)
        imageData = objc.allocateBuffer(int(4 * width * height))
        cg = Quartz.CGBitmapContextCreate(imageData, width, height, 8, width * 4, cs, Quartz.CoreGraphics.kCGImageAlphaPremultipliedFirst)
        Quartz.CoreGraphics.CGContextSaveGState(cg);
        Quartz.CoreGraphics.CGContextTranslateCTM(cg, 0, height);
        Quartz.CoreGraphics.CGContextScaleCTM(cg, 1.0, -1.0);
        AppKit.NSGraphicsContext.setCurrentContext_(AppKit.NSGraphicsContext.graphicsContextWithGraphicsPort_flipped_(cg, objc.NO))
        view.drawRect_(view.bounds())
        Quartz.CoreGraphics.CGContextRestoreGState(cg)

        URL = webview.mainFrame().dataSource().initialRequest().URL().absoluteString()
        filename = self.makeFilename(URL, self.options)

        image = Quartz.CGBitmapContextCreateImage(cg)
        bitmapdata = AppKit.NSBitmapImageRep.alloc().initWithCGImage_(image)
        self.saveImages(bitmapdata,filename,self.options,URL)

        print " ... done"
        self.getURL(webview)

    def timeout_(self, obj):
        Foundation.NSLog("timed out!")
        sys.exit(1)


def main():

    # parse the command line
    usage = """%prog [options] [http://www.example.com/ ...]

examples:
%prog http://www.google.com/                    # screengrab google
%prog -W 1000 -H 1000 http://www.google.com/    # bigger screengrab of google
%prog -T http://www.google.com/                 # just the thumbnail screengrab
%prog -TF http://www.google.com/                # just thumbnail and fullsize grab
%prog -o foo http://www.google.com/             # save images as "foo-thumb.png" etc
%prog -                                         # screengrab urls from stdin
%prog -h | less                                 # full documentation"""

    cmdparser = optparse.OptionParser(usage,version=("webkit2png "+__version__))
    # TODO: add quiet/verbose options
    cmdparser.add_option("-W", "--width",type="float",default=800.0,
       help="initial (and minimum) width of browser (default: 800)")
    cmdparser.add_option("-H", "--height",type="float",default=600.0,
       help="initial (and minimum) height of browser (default: 600)")
    cmdparser.add_option("--clipwidth",type="float",default=200.0,
       help="width of clipped thumbnail (default: 200)",
       metavar="WIDTH")
    cmdparser.add_option("--clipheight",type="float",default=150.0,
       help="height of clipped thumbnail (default: 150)",
       metavar="HEIGHT")
    cmdparser.add_option("-s", "--scale",type="float",default=0.25,
       help="scale factor for thumbnails (default: 0.25)")
    cmdparser.add_option("-m", "--md5", action="store_true",
       help="use md5 hash for filename (like del.icio.us)")
    cmdparser.add_option("-o", "--filename", type="string",default="",
       metavar="NAME", help="save images as NAME.png,NAME-thumb.png etc")
    cmdparser.add_option("-F", "--fullsize", action="store_true",
       help="only create fullsize screenshot")
    cmdparser.add_option("-T", "--thumb", action="store_true",
       help="only create thumbnail sreenshot")
    cmdparser.add_option("-C", "--clipped", action="store_true",
       help="only create clipped thumbnail screenshot")
    cmdparser.add_option("-d", "--datestamp", action="store_true",
       help="include date in filename")
    cmdparser.add_option("-D", "--dir",type="string",default="./",
       help="directory to place images into")
    cmdparser.add_option("-X", "--xpath",type="string",default="",
       help="xpath for node to be captured")
    cmdparser.add_option("--delay",type="float",default=0,
       help="delay between page load finishing and screenshot")
    cmdparser.add_option("--noimages", action="store_true",
       help="don't load images")
    (options, args) = cmdparser.parse_args()
    if len(args) == 0:
        cmdparser.print_usage()
        return
    if options.filename:
        if len(args) != 1 or args[0] == "-":
            print "--filename option requires exactly one url"
            return
    if options.scale == 0:
      cmdparser.error("scale cannot be zero")
    # make sure we're outputing something
    if not (options.fullsize or options.thumb or options.clipped):
      options.fullsize = True
      options.thumb = True
      options.clipped = True
    # work out the initial size of the browser window
    #  (this might need to be larger so clipped image is right size)
    options.initWidth = (options.clipwidth / options.scale)
    options.initHeight = (options.clipheight / options.scale)
    if options.width>options.initWidth:
       options.initWidth = options.width
    if options.height>options.initHeight:
       options.initHeight = options.height

    # create a webview object
    webview = WebKit.WebView.alloc().initWithFrame_(Foundation.NSMakeRect(0, 0, 256, 256))

    # turn off scrolling so the content is actually x wide and not x-15
    webview.mainFrame().frameView().setAllowsScrolling_(objc.NO)

    webview.setPreferencesIdentifier_('webkit2png')
    webview.preferences().setLoadsImagesAutomatically_(not options.noimages)

    # create a LoadDelegate
    delegate = WebkitLoad.alloc().init()
    delegate.options = options
    delegate.urls = args
    webview.setFrameLoadDelegate_(delegate)

    delegate.getURL(webview)
    delegate.performSelector_withObject_afterDelay_('timeout:', None, 60)

    Foundation.NSRunLoop.currentRunLoop().run()

if __name__ == '__main__':
    main()
